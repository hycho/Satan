# 스트림이란 무엇인가?
 - 스트림을 사용하면 선언형으로 컬렉션 데이터를 처리 할 수 있다.
 - 멀티 스레드 코드를 구현하지 않아도 데이터를 투명하게 병렬로 처리할 수 있다. (7장에서 정리).
 
 # 선언형으로 코드를 구현 할 수 있다. 즉 루프, if조건문 등의 제어 블록을 이용해서 어떻게 동작을 구현할지 지정할 필요 없이 '저칼리로리의 요리만 선택하라' 같은 동작의 수행을 지정 할 수 있다.
  - 선언헝으로 코드를 짜면, 저칼로리/고칼로리 구분을 위한 여러 중복되는 로직이 필요없이 실제 구현체인 Filter의 변경만을 통해서 쉽게 기능을 변경할 수 잇다.
  <샘플 1>
  List<String> lowCaloricDishes = 
	menu.stream()	//병렬처리를 위한다면 menu.parallelStream()을 사용한다.
	.filter(dish -> dish.getCalories() < 400) // 고칼로리시에 dish.getCalories() > 400 이렇게 변경하면 된다.
	.sorted(comparing(Dish::getCalories))
	.map(Dish::getName)
	.collect(toList());
# filter, sorted, map, collect 같은 여러 빌딩 블록 연산을 연결 해서 복잡한 로직(연산) 처리 파이프라인을 만들 수 있다.
 - filter(필터) -> sorted(정렬) -> map(출력물) -> collect(수집)
 - filter/sorted/map,collect 같은 연산은 high-level building block으로 이루어 져있으며 특정 스레딩 모델(단인/멀티스레드)에 제한되지 않고 자유롭게 어떤 상황이든 사용 할 수 있다.
 - 즉 데이터 처리 과정을 병렬화 하면서 스레드와 락을 걱정할 필요가 없어졌다. stream api가 거의 알아서 해주기 때문이다.
 
# Java8의 Stream Api의 특징 요약
 - 선언형 : 더 간결하고 가독성이 좋아진다.
 - 조립할 수 있음 : 유연성이 좋아진다.
 - 병렬화 : 성능이 좋아진다.
 
# 컬랙션 스트림
 - Java 8의 컬렉션에서는 스트림을 반환하는 stream이라는 메서드가 추가되었다. (범위는 java.util.stream.Stream 참고), stream()메서드가 아닌 다양한 방법으로 스트림을 얻을 수 잇다.
 
# 스트림이란 데이터 처리 연산을 지원하도록 소스에서 추출된 연속된 요소

(1) 연속된 요소
 - 컬렉션은 자료구조 이므로 시간과 공간의 복잡성과 관련된 요소 저장 및 접근 연산이 주를 이룬다(ArrayList를 사용할지 LinkedList를 사용할것인지)
 - 스트림은 filter, sorted, map처럼 표현 계산식이 주를 이룬다.
 - 즉 컬렉션의 주제는 데이터, 스트림의 주제는 계산이다.
 
(2) 소스
 - 스트림은 컬랙션, 배열, I/O자원 등의 데이터 제공 소스로부터 데이터를 소비(consume)한다.
 - 정렬된 컬렉션으로 스트림을 생성하면 정렬이 그대로 유지된다, 즉 리스트로 스트림을 만들면 스트림의 데이터는 리스트의 데이터와 같은 순서를 유지 한다.
 
(3) 데이터 처리 연산
 - 스트림은 함수형 프로그래밍 언어에서 일반적으로 지원하는 연산과 데이터베이스와 비슷한 연산을 지원한다.
 - filter, map, reduce, find, match, sort등으로 데이터를 조작 할 수 있다. 스트림 연산은 순차적 또는 병렬로 실행할 수 잇다.
 
(4) 파이프라이닝
 - 스트림 연산은 연산과 연산끼리 연결해서 커다란 파이프라인을 구성할 수 있도록 스트림 자신을 리턴한다.
 - 덕분에 laziness, short-circuiting같은 최적화도 얻을 수 있다(5장에서 자세히 정리)
 
(5) 내부 반복
 - for같은 반복문을 이용해서 명시적으로 반복하는 컬렉션과 달리 스트림은 내부 반복을 지원한다. (차후 설명)
 
<샘플 2>
List<String> threeHighCaloricDishsName = 
	menu.stream()	// menu에서 스트림을 받는다.
		.filter(d -> d.getCalories() > 300)	//dish의 칼로리 300이상되는 것만 가져오도록 필터링 한다.
		.map(Dish::getName)	//필터된 값중 이름만 뽑는다.
		.limit(3)	//선착순 3개만 표시한다.
		.collect(toList());	//리스트로 만들어 반환한다.
		
# 스트림과 컬렉션의 차이 정리
		