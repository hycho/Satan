< 스트림으로 데이터를 수집하자 >

- 이 장의 내용 -
 # Collectors 클래스로 컬렉션을 만들고 사용.
 # 하나의 값으로 데이터 스트림 reduce하기.
 # 특별한 reducing 요약 연산.
 # 데이터 그룹화와 분할.
 # 자신만의 커스텀 컬렉터 개발.
  
1. 컬렉터란?
 (1) 컬렉터의 간략 정보
  - 우선 다음의 예제가 무엇을 하는지 알아보자.
   Map<Trader, List<Transaction>> m = transactions.stream()
	.collect(groupingBy(Transaction::getTrader));	//트레이너 별로 트렌젝션리스트를 Map으로 그룹화 해서 보여준다.
  - collect()메소드는 Collector인터페이스 구현체를 받으며 Collector는 스트림의 요소를 어떤 식으로 도출할지 지정한다.
  - collect()에서는 리듀싱 연산을 이용해서 스트림의 각 요소를 방문하면서 파라메터로 넘겨준 Collector인터페이스 구현체가 각각의 요소를 처리한다.
  - Collector인터페이스 구현체를 어떻게 구현 하느냐에 따라서 리듀싱 연산을 어떻게 수행할지 결정이 된다.
  - 직접 Collector를 구현할 수 도 있지만 Java8에서는 많이 사용하는 항목을 정의해서  java.util.stream.Collectors에서 제공을 하고 있다.
 
 (2) 미리 정의된 컬렉터들
  - java.util.stream.Collectors에서 제공하는 기능은 크게 3가지로 구분 할 수 있다.
  - 스트림 요소를 하나의 값으로 리듀스하고 요약 : 요소의 총합등 다양한 계산을 수행할때 유용하다.
  - 각 스트림 요소를 그룹화 : 요소를 그룹화 하거나 각각의 그룹화된 요소에 추가로 리듀싱 연산을 적용 할 수 있다.
  - 각 스트림 요소를 분할 : 분한을 한개의 인수를 받아 불린을 반환하는 함수인 프리디케이트를 그룹화 함수로 사용할 수 있다.
  
2. 리듀싱과 요약
 - stream.collect()로 스트림의 각 항목을 컬렉션으로 재구성 할 수 있다. collect메소드 파라메터로 전달되는 java.util.stream.Collectors에 관해서 알아보자.
 - counting : 스트림의 요소 갯수를 반환한다.
	//counting메소드를 통해서 dish의 갯수를 가져온다.
	long howManyDishes = menu.stream().collect(Collectors.counting());
	System.out.println(howManyDishes);
	//이렇게도 축소 할 수 있지만. counging 컬랙터는 다른 컬렉터와 함께 사용할 때 좋다.
	long howManyDishes1 = menu.stream().count();
 - maxBy, minBy : 최대/최소값을 구하는 이 두 컬렉터는 스트림의 요소를 비교하는 데 사용할 Comparator를 파라메터로 받는다. 
	Optional<Dish> mostCalorieDish = 
		menu.stream().collect(Collectors.maxBy(Comparator.comparingInt(Dish::getCalories)));	//maxBy를 사용하여 칼로리가 가장 높은 것을 검색해온다.
		mostCalorieDish.ifPresent((Dish d) -> System.out.println(d.getCalories()));
 - summingInt : 객체를 int로 반환하는 함수를 파라메터로 받고, summingInt의 파라메터로 전달된 함수는 객체를 int로 매핑한 컬렉터를 반환, 그리고 summingInt가 collect파라메터로 넘어가면 요약 작업을 수행한다.
 	int totalCalories = menu.stream().collect(Collectors.summingInt(Dish::getCalories));
		System.out.println(totalCalories);
 - summingLong, summingDouble도 summingInt와 같은 방식으로 동작하며 단지 log, double형태로 sum하는것이 틀리다.
 - averagingInt, averagingLong, averagingDouble을 통해서 평균을 구할 수 도 잇다.
 	//averagingDouble을 사용하여 칼로리들의 평균을 구한다.
	double avgCalories = menu.stream().collect(Collectors.averagingDouble(Dish::getCalories));
	System.out.println(avgCalories);
 - summarizingInt/Double/Long은 count, sum, min, average, max를 한번에 구해온다. 
 	//Collect.summarizingInt를 사용해서 count, sum, min, average, max를 한번에 구해올 수 있다.
	IntSummaryStatistics menuStatistics = menu.stream().collect(Collectors.summarizingInt(Dish::getCalories));
	System.out.println(menuStatistics); 