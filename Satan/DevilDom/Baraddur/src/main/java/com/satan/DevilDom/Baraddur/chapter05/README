# 스트림 활용.
 - 필터링, 슬라이싱, 매칭에 관해서 알아본다.
 - 검색, 매칭, 리듀싱에 관해서 알아본다.
 - 특정 범위의 숫자와 같은 숫자 스트림 사용.
 - 다중 소스로부터 스트림 만들기
 - 무한스트림에 관해 알아본다.
 
# 필터링과 슬라이싱
 - 필터링 : 스트림 요소를 선택하는 방법
 - 슬라이싱 : 원하는 데이터로 축소 시키는 방법
 
(1) 프리디케이트(predicate)로 필터링 하기
List<Dish> vegetarianMenu = 
	menu.stream()
	.filter(Dish::isVegetarian) // isVegetarian은 boolean을 리턴
	.collect(toList());
	
(2) 고유 요소 필터링
List<Integer> numbers = Arrays.asList(1, 2, 1, 3, 3, 2, 4);
numbers.stream()
	.filter(i-> i % 2 == 0)
	.distinct()	//distinct를 통해서 중복된 데이터를 배재
	.forEach(System.out::println);
	
(3) 스트림 축소
List<Dish> dishes = 
	menu.stream()
	.limit(3)	//limit을 통해서 3개의 요소를 제외한 나머지 요소를 축소 한다.
	.collect(toList());
						
(4) 요소 건너뛰기
List<Dish> dishes = 
	menu.stream()
	.filter(d->d.getCalories() > 300)
	.skip(2)	//skip을 통해서 2건을 건너뛴다.
	.collect(toList());
	
# 매핑	
 - 특정 데이터만 필터링 하는 기능, 예를 들어 SQL의 테이블에서 특정 열만 선택하는 경우를 들 수 있다.
 - map method를 통해서 새로운 요소를 생성한다. 기존의 값을 고치기 보다는 새로운 버전을 만드는 개념이라고 보시면 된다.
 
(1) 스트림의 각 요소에 함수 적용하기.
 - map을 통해서 특정 항목을 추출한다.
 <EX>
 List<String> dishName = menu.stream()
						.map(Dish::getName)
						.collect(toList());
						
 - 예를 들어 컬렉션 안의 text들이 존재한다 이 text들의 length만 추출하고 싶다면? map을 통해서 추출
 <EX>
 List<String> words = Arrays.asList("Java8", "Lambdas", "In", "Action");
 List<Integer> wordLengths = words.stream()
							.map(String::length)
							.collect(toList());						
							
 - 만약 아까의 Dish의 요리 명을 알고 싶다면 map을 통해서 알아 올 수 있다.	
 <EX>
 List<Integer> dishNamesLength = menu.stream()
								.map(Dish::getName)
								.map(String::length)
								.collect(toList());

(2) 스트림 평면화					
 - Arrays.stream : 문자열을 받아서 각각으로 스트림을 생성해준다.
 - flatMap(Arrays.stream) : map(Arrays.stream)같은 경우 각 배열별 데이터를 스트림을 생성한다 즉 ['h','e','l','l','o'] ['w','o','r','l','d'] 이런식으로 stream을 생성하는 반면
                            flatMap(Arrays.stream)같은 경우 기존 배열과 상관없이 스트림의 각각의 값을 다른 스트림으로 만든다. 즉 ['h','e','l','l','o','w','o','r','l','d'] 이렇게 인식을 한다.
 - 숫자 리스트가 주어 졋을때  각 숫자의 제곱근으로 이루어진 리스트를 반환 하시오. 예를 들어 1,2,3,4,5가 주어질 경우 1,4,9,16,25를 반환해야 합니다.
 <EX>
 intList.stream()
	.map(w -> w*w)
	.forEach((Integer a) -> System.out.println(a.toString()));       
 - 두개의 숫자 리스트가 있을 때 모든 숫자 쌍의 리스트를 반환하시오, 예를 들어 두개의 리스트 [1,2,3]과 [3,4]가 주어지면 [(1,3),(1,4),(2,3),(2,4),(3,3),(3,4)]를 반환해야 합니다.
 <EX>
 List<Integer> number1 = Arrays.asList(1,2,3);
 List<Integer> number2 = Arrays.asList(3,4);

 List<Object> pairs = number1.stream()
					.flatMap(i -> number2.stream().map(j -> new int[]{i, j}))
					.collect(toList());

 int[] a = (int[]) pairs.get(0);
 for(int c : a){
	System.out.println(c);
 }
 - 위의 예제에서 합이 3으로 나누어 떨어지는 쌍만 환환하려면 어떻게 해야할까요? 
 List<Integer> number1 = Arrays.asList(1,2,3);
 List<Integer> number2 = Arrays.asList(3,4);

 List<Object> pairs = number1.stream()
					.flatMap(i -> number2.stream().filter(j -> (i+j)%3 == 0).map(j -> new int[]{i, j}))
					.collect(toList());

 int[] a = (int[]) pairs.get(0);
 for(int c : a){
	System.out.println(c);
 }