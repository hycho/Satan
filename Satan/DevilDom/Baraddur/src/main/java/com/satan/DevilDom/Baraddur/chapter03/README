# 람다란 무엇인가?
 - 메서드로 전달할 수 있는 익명함수를 단순화한 것 이라고 말할 수 있다.
 
# 특징
- 익명
 : 보통의 메서드와 달리 이름이 없으므로 익명 이라 표현한다. 구현해야 할 코드에 대한 걱정거리가 줄어든다.
- 함수
 : 람다는 메서드 처럼 특정 클래스에 종속되지 않으므로 함수라고 부른다. 하지만 메서드처럼 파라메터 리스트, 바디, 반환형식, 가능한 예외 리스트를 포함한다.
- 전달
 : 람다 표현식을 메서드 인수로 전달하거나 변수로 저장 할 수 있다.
- 간결성
 : 익명 클래스처럼 많은 짜잘한 코드를 구현할 필요가 없다.
  
람다를 통해서 JAVA8이전에 할 수 없었던 일을 할 수 있는게 아니다.
할 수 있던 일을 간결하게 해주며 익명클래스등 판에 박혀있던 불필요한 코드를 작성할 필요가 없어졌다.

람다 표현식의 예제 및 구성요소는 example01을 참고 하시기 바란다.

람다는 함수형 인터페이스라는 문맥에서 람다 표현식을 사용 할 수 잇다.

함수형 인터페이스?
- 오직 하나의 추상 메서드만 지정하는 인터페이스라 할 수 있다.

java.util.Comparator, java.lang.Runnable같은 것이다.

##########################################
# Quiz01 다음 중 함수형 인터페이스는 무엇인가?
##########################################
(1)
public interface Adder {
	int add(int a, int b);
} 

(2)
public interface SmartAdder extends Adder {
	int add(double a, double b);
}

(3)
public interface Nothing {
}

정답은 1번이다.

함수형 인터페이스로 뭘 할 수 있을까?
 - 람다 표현식으로 인터페이스의 추상 메서드의 기능을 구현 해서 전달이 가능하니, {전체 표현식을 함수형 인터페이스의 인스턴스로 취급} 할 수 있다.
 
# 함수 디스크립터(function descriptor) 먼가 애매모호하게 설명됨... 중요한건 함수형 인터페이스 추상 메소드 시그너처와 람다식의 시그너처는 동일 해야 한다는 것이다.
함수형 인터페이스의 추상 메서드 시그너처(Signature)는 람다 표현식의 시그너처를 가르킨다. 람다 표현식의 시그너처를 서술하는 메서드를 함수 디스크립터라 한다.
예를 들어 람다의 () -> {}는 파라메터가 없으며 void를 반환하는 함수를 의미한다. 즉 Runnable의 run메소드의 시그너처와 동일하다고 이야기 할 수 있다.

# 시그너처란 메소드의 리턴 타입, 파라메터수/타입/위치등을 한대 묶어서 시그너처라고 이야기 한다.

@FunctionalInterface
java.lang.Runnable소스를 보면 @FunctionalInterface어노테이션이 새로 추가가 되어있다.
이어노테이션은 함수형 인터페이스임을 가르키는 어노테이션이며 이 인터페이스를 선언햇지만 함수형 인터페이스가 아닐경우 컴파일러가 에러를 발생한다.
예를들어 추상메소드가 2개 이상이면 "Multiple nonoverrinding abstract methods found in interface Foo(인터페이스 Foo안에 오버라이드 하지 않은 여러 추상메소드가 있다)라는 에러가 발생 할 수 있다.
@FunctionalInterface
public interface Runnable {

#################################
# Java 8의 대표적인 함수형 인터페이스 요약 1 #
#################################
# 불린표현
 - (List<String> list) -> list.isEmpty()
 = Predicate<List<String>>
# 객체 생성 
 - () -> new Apple
 = Supplier<Apple>
# 객체에서 소비
 - (Apple a) -> System.out.println(a.getWeight)
 = Consumer<Apple>
# 객체에서 선택/추출
 - (String s) -> s.length()
 = Function<String, Integer> 또는 ToIntFunction<String>
# 두 값 조합
 - (int a, int b) -> a * b
 = IntBinaryOperator
# 두 객체 비교 
 - (Apple a1, Apple a2) -> a1.getWeight().compareTo(a2.getWeight))
 = Comparator<Apple> 또는 BiFunction<Apple, apple, Integer> 또는 ToIntBiFunction<Apple, Apple>

#################################
# Java 8의 대표적인 함수형 인터페이스 요약 2 #
#################################
Predicate : 파라메터 값을 통해 불린 리턴
Supplier : no파라메터 이며 객체 생성 리턴
Consumer : 파라메터를 받으며 무언가를 실행
Function : 파라메터를 받으며 특정 객체 리턴
Operator : 파라메터를 받으며 파라메터를 통해 계산후 값을 리턴
Comparator : 2객체를 사용하여 int 반환
 

# Quiz 아래 디스크립터를 사용할 수 있는 람다를 생각해보아라

1. T->R Consumer
2. (int, int) -> int
3. T -> void accept
4. () -> T
5. (T,U) -> R

# 메서드 레퍼런스
 - example04패키지 참고
# 생성자 레퍼런스
 - example04패키지 참고
 
# 람다, 메서드 레퍼런스 활용 (example 05)
1. 코드전달
2. List.sort(Comparator<t> t) t를 위한 함수인터페이스 구현 및 적용
3. 함수 인터페이스를 익명 클래스를 사용해서 적용
4. 익명 클래스 대신 > 람다 표현식 사용

# 디폴트 메서드 (default method)

# 요약
- 람다 표현식은 익명 함수의 일종이다. 이름은 없지만 파라메터 리스트, 바디, 반환형식을 가지며 예외를 던질 수 있다.
- 람다 표현식으로 간결한 코드를 구현할 수 잇다.
- 함수형 인터페이스는 하나의 추상 메서드만을 정의하는 인터페이스이다.
- 함수형 인터페이스를 사용 하는 곳에서만 람다 표현식을 사용할 수 잇다.
- 람다 표현식을 사용해서 함수형 인터ㅔ이스의 추상 메서드를 즉석으로 구현(제공)할 수 있으며, 람다 표현식 전체가 함수형 인터ㅔ이스의 인스턴스로 취급된다.
- java.util.function 패키지는 Predicate<T>, Function<T, R>, Supplier<T>, Consumer<T>, BinaryOperator<T>등을 포함해서 자주 사용하는 다양한 함수형 인터페이스를 제공한다.
- Java8은 Predicate<T>와 Function<T,R>같은 제네릭 함수형 인터페이스와 관련한 박싱동작을 피할 수 있도록 IntPredicate, IntToLongFunction등과 같은 기본형 특화 인터페이스도 제공한다.
- 실행 어라운트 패턴( 자원할당, 자원정리등 코드 중간에 실행해야 하는 메서드에 꼭 필요한 코드)를 람다와 활용 하면 유연성과 재사용성을 얻을 수 있다.
- 람다 표현식의 기대 형식을 대상 형식이라고 한다.
- 메서드 레퍼런스를 이용하면 기존의 메서드 구현을 재사용하고 직접 전달 할 수 잇다.
- Comparator, Predicate, Function같은 함수형 인터페이스는 람다 표현식을 조합할 수 있는 다양한 디폴트 메서드를 제공한다.